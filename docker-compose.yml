version: '3.9'

services:
  nginx:
    image: nginx
    restart: always
    container_name: nginx
    command: /etc/nginx_tmp/fill_envsubst.sh
    env_file:
      - '.env'
    volumes:
      - './nginx/log/:/var/log/nginx/:rw'
      - './nginx/:/etc/nginx_tmp/:ro'
      - './certbot/www/:/var/www/certbot/:ro'
      - './certbot/conf/:/etc/nginx/ssl/:ro'
    ports:
      - '80:80'
      - '443:443'
    networks:
      net:
        ipv4_address: '${NGINX_HOST}'
    depends_on:
      rabbitmq:
        condition: service_healthy

  certbot:
    image: certbot/certbot
    container_name: certbot
    command: certonly --webroot -w /var/www/certbot  --email ${CERTBOT_EMAIL} --force-renewal --agree-tos -d ${SERVICE_DOMAIN},${APPLICATION_DOMAIN} --cert-name=${CERT_NAME}
    volumes:
      - './certbot/conf:/etc/letsencrypt/:rw'
      - './certbot/www:/var/www/certbot/:rw'

  postgres:
    image: postgres
    restart: always
    container_name: postgres
    env_file:
      - '.env'
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - './db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
    networks:
      net:
        ipv4_address: '${POSTGRES_HOST}'

  redis:
    image: redis
    restart: always
    container_name: redis
    env_file:
      - '.env'
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
      net:
        ipv4_address: '${REDIS_HOST}'

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    container_name: rabbitmq
    env_file:
      - '.env'
    ports:
      - '${RABBITMQ_PORT}:5672'
      - '${RABBITMQ_WEB_PORT}:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
    networks:
      net:
        ipv4_address: '${RABBITMQ_HOST}'

  consumer:
    build: 'consumer/'
    restart: always
    container_name: consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      net:

  elasticsearch:
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    restart: no
    container_name: elasticsearch
    command: /setup.sh
    environment:
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASS}
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
    ports:
      - '${ELASTICSEARCH_PORT}:9200'
      - '${ELASTICSEARCH_PORT_CLUSTER}:9300'
    volumes:
      - './elastic/elasticsearch/setup.sh:/setup.sh'
      - './elastic/elasticsearch/instances.yml:/instances.yml'
      - './elastic/elasticsearch/certs:/usr/share/elasticsearch/config/certs:rw'
      - './elastic/elasticsearch/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh'
      - './elastic/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml'
    networks:
      net:
        ipv4_address: '${ELASTICSEARCH_HOST}'

  logstash:
    image: logstash:${LOGSTASH_VERSION}
    container_name: logstash
    restart: no
    environment:
#      - 'xpack.monitoring.enabled=false'
      - 'LS_JAVA_OPTS=-Xmx1g -Xms1g'
      - 'ELASTIC_USER=elastic'
      - 'ELASTIC_PASSWORD=${ELASTICSEARCH_PASS}'
      - 'ELASTIC_HOSTS=${ELASTICSEARCH_URL}'
    volumes:
      - './elastic/elasticsearch/certs:/usr/share/logstash/certs'
      - './elastic/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro'
      - './elastic/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro'
      - './${LOG_DIR}/:/usr/share/logstash/ingest_data/'
    ports:
      - '${LOGSTASH_PORT}:9600'
    depends_on:
      - elasticsearch
    networks:
      net:
        ipv4_address: '${LOGSTASH_HOST}'

  kibana:
    image: kibana:${KIBANA_VERSION}
    container_name: kibana
    restart: always
    ports:
      - '${KIBANA_PORT}:5601'
    volumes:
      - './elastic/kibana/data:/usr/share/kibana/data/'
      - './elastic/elasticsearch/certs/:/usr/share/kibana/config/certs'
      - './elastic/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml'
    depends_on:
      - elasticsearch
    networks:
      net:
        ipv4_address: '${KIBANA_HOST}'

networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
